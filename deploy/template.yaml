AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  dont-stress-tester

  Sample SAM Template for dont-stress-tester

Globals:
  Function:
    Timeout: 5
    Environment:
      Variables:
        LABS_TABLE_NAME: dont-stress-labs-table
        TASKS_TABLE_NAME: dont-stress-tasks-table
        FILES_TABLE_NAME: dont-stress-files-table
        RUNS_TABLE_NAME: dont-stress-testruns-table
        BUCKET_NAME: dont-stress-files-bucket

Resources:
  LangsStatic:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ../lambda-api/static/
      Description: Supported languages

  CreateLabFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda-api/handlers/create-lab/
      Handler: create-lab
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: dont-stress-labs-table
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /labs
            Method: Post
      Layers:
        - !Ref LangsStatic

  GetLabsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda-api/handlers/get-labs/
      Handler: get-labs
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: dont-stress-labs-table
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /labs
            Method: Get

  DeleteLabFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda-api/handlers/delete-lab/
      Handler: delete-lab
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: dont-stress-labs-table
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /lab/{labid}
            Method: Delete

  CreateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda-api/handlers/create-lab-task/
      Handler: create-lab-task
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: dont-stress-tasks-table
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /lab/{labid}/tasks
            Method: Post

  GetLabTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda-api/handlers/get-lab-tasks/
      Handler: get-lab-tasks
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /lab/{labid}/tasks
            Method: Get

  AddTaskDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda-api/handlers/add-task-data/
      Handler: add-task-data
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: dont-stress-tasks-table
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /lab/{labid}/task/{taskid}
            Method: Post

  DeleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda-api/handlers/delete-task/
      Handler: delete-task
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: dont-stress-tasks-table
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /lab/{labid}/task/{taskid}
            Method: Delete

  PollTaskTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda-api/handlers/poll-task-test/
      Handler: poll-task-test
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: dont-stress-tasks-table
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /lab/{labid}/task/{taskid}/test
            Method: GET

  RunTaskTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda-api/handlers/run-task-test/
      Handler: run-task-test
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: dont-stress-tasks-table
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /lab/{labid}/task/{taskid}/test
            Method: Post

  FilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: dont-stress-files-bucket

  # TODO replace with auto-generated names

  FilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dont-stress-files-table
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      # StreamSpecification:
      #   StreamViewType: NEW_IMAGE

  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dont-stress-tasks-table
      AttributeDefinitions:
        - AttributeName: labid
          AttributeType: S
        - AttributeName: num
          AttributeType: N
      KeySchema:
        - AttributeName: labid
          KeyType: HASH
        - AttributeName: num
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  LabsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dont-stress-labs-table
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  TestRunsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dont-stress-testruns-table
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
# TODO implement authorization

# AdminsTable:
#   Type: AWS::DynamoDB::Table
#   Properties:
#     AttributeDefinitions:
#       - AttributeName: id
#         AttributeType: S
#     KeySchema:
#       - AttributeName: id
#         KeyType: HASH
#     BillingMode: PAY_PER_REQUEST
#     StreamSpecification:
#       StreamViewType: NEW_IMAGE
